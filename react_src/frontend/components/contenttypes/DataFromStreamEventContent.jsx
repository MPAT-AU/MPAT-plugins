/**
 *
 * Copyright (c) 2017 MPAT Consortium , All rights reserved.
 * Fraunhofer FOKUS, Fincons Group, Telecom ParisTech, IRT, Lacaster University, Leadin, RBB, Mediaset
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 *
 * Authors:
 * Jean-Claude Dufourd (jean-claude.dufourd@telecom-paristech.fr
 *
 **/
import React, { PropTypes as Types } from 'react';

import { componentLoader } from '../../../ComponentLoader';

/**
 * The Data compoment is a variant of the Text component whose content is grabbed from
 * a URL. The URL should be that of a web service which delivers a piece of text or a
 * HTML fragment
 */
class DataFromStreamEventContent extends React.Component {

  static propTypes = {
    streameventname: Types.string,
    streameventid: Types.number,
    componenttag: Types.number
  };

  constructor(props) {
    super(props);
    this.state = {
      id: "m"+Math.floor(Math.random()*1000000),
      data: ""
    };
    this.handleStreamEvent = this.handleStreamEvent.bind(this);
  }

  componentWillMount() {
    try {
      const intBcContainer = document.getElementById('vidcontainer');
      const intBcVideo = document.createElement('object');
      intBcVideo.id = 'broadcastvideo';
      intBcVideo.type = 'video/broadcast';
      intBcContainer.appendChild(intBcVideo);
      intBcVideo.bindToCurrentChannel();
      intBcVideo.addStreamEventListener('event', this.props.streameventname, this.handleStreamEvent);
      /*
        'event' above refers to the file 'event' in the current directory on the server
        this file is generated by the file TimeLine/dsmcc.php
        from data stored in option 'dsmcc'
       */
    } catch (e) {
      log(`error in HbbTV bc init ${e.message}`);
    }
  }

  handleStreamEvent(streamEvent) {
    // available fields are name / data / text / status
    log(`streamevent received: "${streamEvent.text}"`);
    setState({data: streamevent.text});
  }

  render() {
    return (
      <div className="page-element-content text-content" style={{ overflow: 'hidden' }}>
        {this.state.data}
      </div>
    );
  }

}
componentLoader.registerComponent('datafromstreamevent', { view: DataFromStreamEventContent }, {
  isStylable: true
});
